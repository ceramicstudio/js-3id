version: 2.1

orbs:
  aws-s3: circleci/aws-s3@1.0.15

jobs:
  test-and-build:
    working_directory: ~/3id-connect
    docker:
      - image: mcr.microsoft.com/playwright@sha256:9ed647342dba733508fdf102ae13b669b3e3ad11f16045e42b1af50a29d4b871
        environment:
          NODE_ENV: development
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - dependencies-cache-{{ checksum "package.json" }}

      - run:
          name: install dependencies
          command: |
            apt-get update && apt-get install -y --no-install-recommends python make gcc g++
            npm i -g codecov lerna node-gyp
            yarn install --frozen-lockfile
            npx playwright install-deps

      - run:
          name: lint
          command: yarn run lint

      - run:
          name: test
          command: yarn test

      - when:
          condition:
            equal: [develop, << pipeline.git.branch >>]
          steps:
            - run:
                name: build
                command: lerna run build:dev

      - when:
          condition:
            not:
              equal: [develop, << pipeline.git.branch >>]
          steps:
            - run:
                name: build
                command: lerna run build:prod

      - when:
          condition:
            not:
              equal: [develop, << pipeline.git.branch >>]
          steps:
            - run:
                name: build
                command: lerna run build:clay

      # - run:
      #     name: code-coverage
      #     command: bash <(curl -s https://codecov.io/bash)

      - persist_to_workspace:
          root: ~/3id-connect
          paths:
            - public
            - public-clay

      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - node_modules

  deploy-dev:
    working_directory: ~/3id-connect
    docker:
      - image: 'circleci/python:3.8'
    steps:
      - attach_workspace:
          at: .
      - aws-s3/sync:
          arguments: '--acl public-read --cache 604800'
          from: public/v2
          overwrite: true
          to: 's3://3id-connect-dev-ceramic/v2'
      - run:
          name: 'Invalidate CloudFront Cache'
          command: aws cloudfront create-invalidation --distribution-id E1PKS2J8XTFTYN --paths /v2 /v2/*

  deploy-prod:
    working_directory: ~/3id-connect
    docker:
      - image: 'circleci/python:3.8'
    steps:
      - attach_workspace:
          at: .
      - aws-s3/sync:
          arguments: '--acl public-read --cache 604800'
          from: public/v2
          overwrite: true
          to: 's3://3id-connect-prod-ceramic/v2'
      - run:
          name: 'Invalidate CloudFront Cache'
          command: aws cloudfront create-invalidation --distribution-id E1JN8AUJY96OQ9 --paths /v2 /v2/*

  deploy-clay:
    working_directory: ~/3id-connect
    docker:
      - image: 'circleci/python:3.8'
    steps:
      - attach_workspace:
          at: .
      - aws-s3/sync:
          arguments: '--acl public-read --cache 604800'
          from: public-clay/v2
          overwrite: true
          to: 's3://3id-connect-clay-ceramic/v2'
      - run:
          name: 'Invalidate CloudFront Cache'
          command: aws cloudfront create-invalidation --distribution-id E11EBQ4LUR3PLA --paths /v2 /v2/*

workflows:
  build-deploy:
    jobs:
      - test-and-build
      - deploy-dev:
          requires:
            - test-and-build
          filters:
            branches:
              only: develop
      # - deploy-prod:
      #     requires:
      #       - test-and-build
      #     filters:
      #       branches:
      #         only: main
      # - deploy-clay:
      #     requires:
      #       - test-and-build
      #     filters:
      #       branches:
      #         only: main
